#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo
from tatsu.parsing import leftrec, nomemo  # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class BoiBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(BoiBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class BoiParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=BoiBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(BoiParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _id_(self):  # noqa
        self._pattern('[a-zA-Z][a-zA-Z0-9_]*')

    @tatsumasu()
    def _var_(self):  # noqa
        self._id_()

    @tatsumasu()
    def _float_(self):  # noqa
        self._pattern('[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?')

    @tatsumasu()
    def _value_(self):  # noqa
        self._float_()
        self.name_last_node('@')

    @tatsumasu()
    def _expr_(self):  # noqa
        with self._choice():
            with self._option():
                self._value_()
                self.name_last_node('@')
            with self._option():
                self._var_()
                self.name_last_node('@')
            with self._option():
                self._token('(')
                self._cut()
                self._base_expr_()
                self.name_last_node('@')
                self._cut()
                self._token(')')
            self._error('no available options')

    @tatsumasu()
    def _multiplicative_expr_(self):  # noqa
        self._expr_()
        self.add_last_node_to_name('@')

        def block1():
            with self._group():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('*')
                        with self._option():
                            self._token('/')
                        self._error('no available options')
                self._cut()
                self._expr_()
            self.add_last_node_to_name('@')
        self._closure(block1)

    @tatsumasu()
    def _pow_expr_(self):  # noqa
        self._multiplicative_expr_()
        self.add_last_node_to_name('@')

        def block1():
            with self._group():
                self._token('**')
                self._cut()
                self._multiplicative_expr_()
                self.add_last_node_to_name('@')
        self._closure(block1)

    @tatsumasu()
    def _additive_expr_(self):  # noqa
        self._pow_expr_()
        self.add_last_node_to_name('@')

        def block1():
            with self._group():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('+')
                        with self._option():
                            self._token('-')
                        self._error('no available options')
                self._cut()
                self._pow_expr_()
            self.add_last_node_to_name('@')
        self._closure(block1)

    @tatsumasu()
    def _base_expr_(self):  # noqa
        with self._choice():
            with self._option():
                self._lambda_expr_()
                self.name_last_node('@')
            with self._option():
                self._let_expr_()
                self.name_last_node('@')
            with self._option():
                self._if_expr_()
                self.name_last_node('@')
            with self._option():
                self._function_call_expr_()
                self.name_last_node('@')
            with self._option():
                self._additive_expr_()
                self.name_last_node('@')
            self._error('no available options')

    @tatsumasu()
    def _bool_expr_(self):  # noqa
        with self._choice():
            with self._option():
                self._comparison_expr_()
                self.name_last_node('@')
            with self._option():
                self._condition_expr_()
                self.name_last_node('@')
            self._error('no available options')

    @tatsumasu()
    def _comparison_expr_(self):  # noqa
        self._base_expr_()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('>=')
                with self._option():
                    self._token('>')
                with self._option():
                    self._token('<=')
                with self._option():
                    self._token('<')
                with self._option():
                    self._token('=')
                with self._option():
                    self._token('<>')
                self._error('no available options')
        self._cut()
        self._base_expr_()

    @tatsumasu()
    def _condition_expr_(self):  # noqa
        self._base_expr_()

    @tatsumasu()
    def _function_call_expr_(self):  # noqa
        self._id_()
        self.add_last_node_to_name('@')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('(')
                    self._token(')')
                with self._option():

                    def block2():
                        self._expr_()
                    self._positive_closure(block2)
                self._error('no available options')
        self.add_last_node_to_name('@')

    @tatsumasu()
    def _let_expr_(self):  # noqa
        self._token('let')
        self._id_()
        self.add_last_node_to_name('@')
        self._token('=')
        self._cut()
        self._base_expr_()
        self.add_last_node_to_name('@')
        self._cut()
        self._token('in')
        self._cut()
        self._base_expr_()
        self.add_last_node_to_name('@')

    @tatsumasu()
    def _lambda_expr_(self):  # noqa
        self._token('let')
        self._id_()
        self.add_last_node_to_name('@')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('(')
                    self._token(')')
                with self._option():

                    def block2():
                        self._id_()
                    self._positive_closure(block2)
                self._error('no available options')
        self.add_last_node_to_name('@')
        self._token('=')
        self._cut()
        self._base_expr_()
        self.add_last_node_to_name('@')
        self._cut()
        self._token('in')
        self._cut()
        self._base_expr_()
        self.add_last_node_to_name('@')

    @tatsumasu()
    def _if_expr_(self):  # noqa
        self._token('if')
        self._cut()
        self._bool_expr_()
        self.add_last_node_to_name('@')
        self._cut()
        self._token('then')
        self._cut()
        self._base_expr_()
        self.add_last_node_to_name('@')
        self._cut()
        self._token('else')
        self._cut()
        self._base_expr_()
        self.add_last_node_to_name('@')

    @tatsumasu()
    def _function_(self):  # noqa
        self._token('let')
        self._id_()
        self.add_last_node_to_name('@')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('(')
                    self._token(')')
                with self._option():

                    def block2():
                        self._id_()
                    self._positive_closure(block2)
                self._error('no available options')
        self.add_last_node_to_name('@')
        self._cut()
        self._token('=')
        self._cut()
        self._base_expr_()
        self.add_last_node_to_name('@')

    @tatsumasu()
    def _program_(self):  # noqa

        def block1():
            with self._choice():
                with self._option():
                    self._function_()
                with self._option():
                    self._base_expr_()
                self._error('no available options')
        self._closure(block1)
        self.name_last_node('@')
        self._check_eof()

    @tatsumasu()
    def _start_(self):  # noqa
        self._program_()


class BoiSemantics(object):
    def id(self, ast):  # noqa
        return ast

    def var(self, ast):  # noqa
        return ast

    def float(self, ast):  # noqa
        return ast

    def value(self, ast):  # noqa
        return ast

    def expr(self, ast):  # noqa
        return ast

    def multiplicative_expr(self, ast):  # noqa
        return ast

    def pow_expr(self, ast):  # noqa
        return ast

    def additive_expr(self, ast):  # noqa
        return ast

    def base_expr(self, ast):  # noqa
        return ast

    def bool_expr(self, ast):  # noqa
        return ast

    def comparison_expr(self, ast):  # noqa
        return ast

    def condition_expr(self, ast):  # noqa
        return ast

    def function_call_expr(self, ast):  # noqa
        return ast

    def let_expr(self, ast):  # noqa
        return ast

    def lambda_expr(self, ast):  # noqa
        return ast

    def if_expr(self, ast):  # noqa
        return ast

    def function(self, ast):  # noqa
        return ast

    def program(self, ast):  # noqa
        return ast

    def start(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'id'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = BoiParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, BoiParser, name='Boi')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
